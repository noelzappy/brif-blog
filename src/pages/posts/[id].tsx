import React, { useEffect } from "react";
import { ArrowLeftIcon } from "@heroicons/react/outline";
import Head from "next/head";
import { useRouter } from "next/router";
import Moment from "react-moment";
import ReactLoading from "react-loading";

import Sidebar from "../../components/Sidebar";
import Widgets from "../../components/Widgets";
import { Config } from "../../config";
import { useGetPostQuery } from "../../services/api";

export default function PostPage({ categories }) {
  const router = useRouter();
  const { id } = router.query;
  const { data: post, error, isLoading } = useGetPostQuery(id as string);

  return (
    <div>
      <Head>
        <title>
          {post?.title || "Article"} | {post?.category?.name || ""} | theBrif
        </title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="flex min-h-screen mx-auto">
        <Sidebar categories={categories} />

        <div className="xl:ml-[370px] border-l border-r border-gray-200  xl:min-w-[576px] sm:ml-[73px] flex-grow max-w-xl p-5">
          <div className="flex items-center space-x-2  py-2 px-3 sticky top-0 z-50 bg-white border-b border-gray-200">
            <div className="hoverEffect" onClick={() => router.push("/")}>
              <ArrowLeftIcon className="h-5 " />
            </div>
            <h2 className="text-lg sm:text-xl font-bold cursor-pointer">
              Article
            </h2>
          </div>

          {error ? (
            <div className="flex justify-center items-center h-[500px] w-full">
              <h1 className="text-2xl font-bold text-red-500">
                Something went wrong
              </h1>
            </div>
          ) : null}
          {post ? (
            <>
              <div className="relative mb-5 h-[500px] w-full overflow-hidden rounded-lg bg-white sm:aspect-h-1 sm:aspect-w-2 lg:aspect-h-1 lg:aspect-w-1 group-hover:opacity-75 sm:h-[300px] lg:h-[500px] md:h-[400px]">
                <img
                  src={post.image}
                  alt={post.title}
                  className="h-full w-full object-cover object-center"
                />
              </div>

              <div className="relative mt-5 flex items-center gap-x-4">
                <div className="text-sm leading-6">
                  <p className="font-semibold text-gray-900">
                    <span className="absolute inset-0" />
                    {post.author.name}
                  </p>
                </div>
              </div>

              <div className="flex items-center gap-x-4 text-xs">
                <time dateTime={post.datePublished} className="text-gray-500">
                  <Moment format="MMM DD, YYYY">{post.datePublished}</Moment>
                </time>
                <div className="flex items-center gap-x-2 text-gray-500">
                  <a
                    href={`/category/${post.category.slug}`}
                    className="relative z-10 rounded-full bg-gray-50 px-3 py-1.5 font-medium text-gray-600 hover:bg-gray-100"
                  >
                    {post.category.name}
                  </a>
                  <span className="hidden sm:inline-block">Â·</span>
                  {post.tags.map((tag, index) => (
                    <a
                      // href={`/tags/${tag}`}
                      className="relative z-10 rounded-full bg-gray-50 px-3 py-1.5 font-medium text-gray-600 hover:bg-gray-100"
                      key={index + tag}
                    >
                      #{tag}
                    </a>
                  ))}
                </div>
              </div>

              <div
                dangerouslySetInnerHTML={{ __html: post?.excerpt }}
                className="mb-5 text-lg font-medium leading-relaxed"
              />

              <div dangerouslySetInnerHTML={{ __html: post?.content }} />
            </>
          ) : (
            <div className="flex justify-center items-center h-[500px] w-full">
              {isLoading && (
                <ReactLoading
                  type="spin"
                  color="#4f04f6"
                  height={50}
                  width={50}
                />
              )}
            </div>
          )}
        </div>

        <Widgets newsResults={[]} randomUsersResults={null} />
      </main>
    </div>
  );
}

export async function getServerSideProps() {
  let categories = [];

  let post = null;

  try {
    const res = await fetch(Config.API_URL + "/categories").then((res) =>
      res.json()
    );
    categories = res;
  } catch (error) {
    // console.log(error);
  }

  return {
    props: {
      categories,
    },
  };
}
